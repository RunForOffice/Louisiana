sheriffs <- "Sheriff"
sheriffs <- filter(la, office %in% sheriffs)
police <- "Chief of Police"
police <- filter(la, office %in% police)
DA <- "District Attorney"
DA <- filter(la, office %in% DA)
enforce <- c("Judge, Court of Appeal", "Judge", "Judge, Family Court", "District Judge",
"City Judge", "City Judge, City Court", "Sheriff", "Chief of Police",
"District Attorney", "Marshal", "City Marshal", "City Constable", "Constable")
enforce <- filter(la, office %in% enforce)
# coerce to factor again to drop ghost levels
enforce <- mutate(enforce,
genoffice = enforce$office,
genoffice = fct_recode(office,
"Judge" = "Judge, Court of Appeal",
"Judge" = "Judge, Family Court",
"Judge" = "District Judge",
"Judge" =  "City Judge",
"Judge" = "City Judge, City Court",
"Constable" = "City Constable",
"Marshal" = "City Marshal"))
enforce$genoffice = factor(enforce$genoffice)
enforce <- mutate(enforce,
race = fct_relevel(race,
"Black or African American",
"Other",
"White"))
enforce <- mutate(enforce,
party = fct_relevel(party,
"Democrat",
"Other",
"Republican"))
df2 <- full_join(enforce, pop, by = c("race", "genoffice"))
df2 <- mutate(df2,
genoffice = as.factor(genoffice),
genoffice = fct_relevel(genoffice,
"2016 Louisiana Population",
"Chief of Police",
"Constable",
"Judge",
"Marshal",
"District Attorney",
"Sheriff"))
# ..................................................................................................
# 4. LOCAL GOVERNMENT
local <- c("Mayor", "Mayor-President", "Council Member", "Parish President", "Police Juror")
local <- filter(la, genoffice %in% local)
local <- mutate(local,
genoffice = fct_relevel(genoffice,
"Mayor",
"Council Member",
"Parish President",
"Police Juror"))
local$genoffice = factor(local$genoffice)
df3 <- full_join(local, pop, by = c("race", "genoffice"))
df3 <- mutate(df3,
genoffice = as.factor(genoffice),
genoffice = fct_relevel(genoffice,
"2016 Louisiana Population",
"Mayor",
"Council Member",
"Parish President",
"Police Juror"))
mpop <- read.csv("municipal_populations.csv")
mpop <- separate(data = mpop, col = city, into = c("city", "type"),
sep = " city| town| village") %>% select(city, X2017)
mpop <- rename(mpop, "population"="X2017")
mpop <- mutate(mpop,
city = fct_recode(city,
"Amite" = "Amite City",
"Lafitte" = "Jean Lafitte"))
local$city[local$description == 'City of New Orleans'] <- 'New Orleans'
local$city[local$description == 'Metro Council, City of Baton Rouge'] <- 'Baton Rouge'
local <- left_join(local, mpop, by = "city")
# ..................................................................................................
muni <- c("Mayor", "Council Member")
muni <- filter(local, genoffice %in% muni)
muni$density <- ifelse(muni$population>47000, "Urban", "Rural")
muni$density <- factor(muni$density)
# ..................................................................................................
save.image("LA.Rdata")
load("LA.RData")
elect <- read_excel("la_elections_clean.xlsx")
View(louisiana)
# Code from Jake Johnson @johnson_shuffle on Slacks
library(tidyverse)
options(java.parameters = "-Xmx8000m") ;  library(xlsx)
# ----- preliminaries -----------------------------------------------------
# multi-parish workbooks
mul <- c('Multi-Parish(Parish)', 'Multi-Parish(Precinct)')
# read in data: list of parishes
par <- read.xlsx(
'election-results-2014.xlsx',
sheetName = mul[1],
startRow = 7,
endRow = 72,
colIndex = 1
)
par <- par[, 1]
# ----- multi-parish (parish) ---------------------------------------------
# read in data
xls <- read.xlsx(
'election-results-2014.xlsx',
sheetName = mul[1],
startRow = 6,
header = F
)
# total votes
tvr <- grep('Total Votes', xls$X1)
# elections
ele <- xls[tvr - 2, 1]
# start/end
str <- tvr + 1
end <- tvr - 3
end <- c(end[-1], nrow(xls))
# loop
x <- list()
for (i in seq_along(str)) {
# construct the data frame
tmp <- xls[str[i]:end[i], ]
names(tmp) <- c('Parish', t(xls[str[i] - 2, ])[, 1][-1])
tmp <- tmp[names(tmp)[!is.na(names(tmp))]]
# add election type
tmp <- cbind(rep(ele[i], nrow(tmp)), tmp)
names(tmp)[1] <- 'Election'
# reshape
tmp <- gather(tmp, Option, Votes, -1:-2)
tmp <- spread(tmp, Parish, Votes)
# store in list
x[[i]] <- tmp ; rm(tmp)
}
# bind together
x <- do.call(plyr::rbind.fill, x)
# ----- parish workbooks --------------------------------------------------
# helper function
par_fun <- function(wb) {
# read in data
xls <- read.xlsx(
'election-results-2014.xlsx',
sheetName = wb,
startRow = 6,
header = F
)
# total votes
tvr <- grep('Total Votes', xls$X1)
# elections
ele <- xls[tvr - 2, 1]
# loop
dat <- list()
for (i in seq_along(tvr)) {
# construct the data frame
tmp <- xls[tvr[i], ]
tmp[1, 1] <- wb
names(tmp) <- c('Parish', t(xls[tvr[i] - 1, ])[, 1][-1])
tmp <- tmp[names(tmp)[!is.na(names(tmp))]]
# add election type
tmp <- cbind(rep(ele[i], nrow(tmp)), tmp)
names(tmp)[1] <- 'Election'
# reshape
tmp <- gather(tmp, Option, Votes, -1:-2)
tmp <- spread(tmp, Parish, Votes)
# store in list
dat[[i]] <- tmp ; rm(tmp)
}
# bind together
dat <- do.call(rbind, dat)
return(dat)
}
# make safe
par_fun <- safely(par_fun)
# map the helper function
y <- map(par, par_fun)
# map the result
z <- map(y, ~.x$result)
z <- do.call(plyr::rbind.fill, z)
# ----- final bind --------------------------------------------------------
out <- plyr::rbind.fill(x, z)
write.xlsx(out, '2014-elections-clean.xlsx', row.names = F)
library(readxl)
# Code from Jake Johnson @johnson_shuffle on Slacks
library(tidyverse)
library(readxl)
options(java.parameters = "-Xmx8000m") ;  library(xlsx)
# ----- preliminaries -----------------------------------------------------
# multi-parish workbooks
mul <- c('Multi-Parish(Parish)', 'Multi-Parish(Precinct)')
# read in data: list of parishes
par <- read.xlsx(
'election-results-2014.xlsx',
sheetName = mul[1],
startRow = 7,
endRow = 72,
colIndex = 1
)
par <- par[, 1]
# ----- multi-parish (parish) ---------------------------------------------
# read in data
xls <- read.xlsx(
'election-results-2014.xlsx',
sheetName = mul[1],
startRow = 6,
header = F
)
# total votes
tvr <- grep('Total Votes', xls$X1)
# elections
ele <- xls[tvr - 2, 1]
# start/end
str <- tvr + 1
end <- tvr - 3
end <- c(end[-1], nrow(xls))
# loop
x <- list()
for (i in seq_along(str)) {
# construct the data frame
tmp <- xls[str[i]:end[i], ]
names(tmp) <- c('Parish', t(xls[str[i] - 2, ])[, 1][-1])
tmp <- tmp[names(tmp)[!is.na(names(tmp))]]
# add election type
tmp <- cbind(rep(ele[i], nrow(tmp)), tmp)
names(tmp)[1] <- 'Election'
# reshape
tmp <- gather(tmp, Option, Votes, -1:-2)
tmp <- spread(tmp, Parish, Votes)
# store in list
x[[i]] <- tmp ; rm(tmp)
}
# bind together
x <- do.call(plyr::rbind.fill, x)
# ----- parish workbooks --------------------------------------------------
# helper function
par_fun <- function(wb) {
# read in data
xls <- read.xlsx(
'election-results-2014.xlsx',
sheetName = wb,
startRow = 6,
header = F
)
# total votes
tvr <- grep('Total Votes', xls$X1)
# elections
ele <- xls[tvr - 2, 1]
# loop
dat <- list()
for (i in seq_along(tvr)) {
# construct the data frame
tmp <- xls[tvr[i], ]
tmp[1, 1] <- wb
names(tmp) <- c('Parish', t(xls[tvr[i] - 1, ])[, 1][-1])
tmp <- tmp[names(tmp)[!is.na(names(tmp))]]
# add election type
tmp <- cbind(rep(ele[i], nrow(tmp)), tmp)
names(tmp)[1] <- 'Election'
# reshape
tmp <- gather(tmp, Option, Votes, -1:-2)
tmp <- spread(tmp, Parish, Votes)
# store in list
dat[[i]] <- tmp ; rm(tmp)
}
# bind together
dat <- do.call(rbind, dat)
return(dat)
}
# make safe
par_fun <- safely(par_fun)
# map the helper function
y <- map(par, par_fun)
# map the result
z <- map(y, ~.x$result)
z <- do.call(plyr::rbind.fill, z)
# ----- final bind --------------------------------------------------------
out <- plyr::rbind.fill(x, z)
write.xlsx(out, '2014-elections-clean.xlsx', row.names = F)
install.packages("xlsx")
library(xlsx)
# Code from Jake Johnson @johnson_shuffle on Slacks
library(tidyverse)
library(readxl)
library(xlsx)
options(java.parameters = "-Xmx8000m") ;  library(xlsx)
# ----- preliminaries -----------------------------------------------------
# multi-parish workbooks
mul <- c('Multi-Parish(Parish)', 'Multi-Parish(Precinct)')
# read in data: list of parishes
par <- read.xlsx(
'election-results-2014.xlsx',
sheetName = mul[1],
startRow = 7,
endRow = 72,
colIndex = 1
)
par <- par[, 1]
# ----- multi-parish (parish) ---------------------------------------------
# read in data
xls <- read.xlsx(
'election-results-2014.xlsx',
sheetName = mul[1],
startRow = 6,
header = F
)
# total votes
tvr <- grep('Total Votes', xls$X1)
# elections
ele <- xls[tvr - 2, 1]
# start/end
str <- tvr + 1
end <- tvr - 3
end <- c(end[-1], nrow(xls))
# loop
x <- list()
for (i in seq_along(str)) {
# construct the data frame
tmp <- xls[str[i]:end[i], ]
names(tmp) <- c('Parish', t(xls[str[i] - 2, ])[, 1][-1])
tmp <- tmp[names(tmp)[!is.na(names(tmp))]]
# add election type
tmp <- cbind(rep(ele[i], nrow(tmp)), tmp)
names(tmp)[1] <- 'Election'
# reshape
tmp <- gather(tmp, Option, Votes, -1:-2)
tmp <- spread(tmp, Parish, Votes)
# store in list
x[[i]] <- tmp ; rm(tmp)
}
# bind together
x <- do.call(plyr::rbind.fill, x)
# ----- parish workbooks --------------------------------------------------
# helper function
par_fun <- function(wb) {
# read in data
xls <- read.xlsx(
'election-results-2014.xlsx',
sheetName = wb,
startRow = 6,
header = F
)
# total votes
tvr <- grep('Total Votes', xls$X1)
# elections
ele <- xls[tvr - 2, 1]
# loop
dat <- list()
for (i in seq_along(tvr)) {
# construct the data frame
tmp <- xls[tvr[i], ]
tmp[1, 1] <- wb
names(tmp) <- c('Parish', t(xls[tvr[i] - 1, ])[, 1][-1])
tmp <- tmp[names(tmp)[!is.na(names(tmp))]]
# add election type
tmp <- cbind(rep(ele[i], nrow(tmp)), tmp)
names(tmp)[1] <- 'Election'
# reshape
tmp <- gather(tmp, Option, Votes, -1:-2)
tmp <- spread(tmp, Parish, Votes)
# store in list
dat[[i]] <- tmp ; rm(tmp)
}
# bind together
dat <- do.call(rbind, dat)
return(dat)
}
# make safe
par_fun <- safely(par_fun)
# map the helper function
y <- map(par, par_fun)
# map the result
z <- map(y, ~.x$result)
z <- do.call(plyr::rbind.fill, z)
# ----- final bind --------------------------------------------------------
out <- plyr::rbind.fill(x, z)
write.xlsx(out, '2014-elections-clean.xlsx', row.names = F)
library(xlsx)
install.packages("xlsx")
elect <- read_excel("la_elections_clean.xlsx")
View(elect)
?gather
elect <- gather(elect, "parish", "votes", Acadia:Winn)
View(elect)
elect <- rename(elect, "election"="Election", "candidate"="option")
elect <- read_excel("la_elections_clean.xlsx")
elect <- rename(elect, "election"="Election", "candidate"="Option")
elect <- gather(elect, "parish", "votes", Acadia:Winn)
View(elect)
elect <- separate(elect, col = election, into = c("position", "district"), sep = " -- ")
View(elect)
elect <- filter(elect, !"ACT" %in% elect$position)
elect <- filter(elect, !(elect$candidate=="YES" | elect$candidate=="NO"))
?separate
# separate out party column
elect <- separate(elect, col = candidate, into = c("del", "party", "del2"), sep = " ( | )")
elect <- read_excel("la_elections_clean.xlsx")
# rename
elect <- rename(elect, "election"="Election", "candidate"="Option")
# gather parishes
elect <- gather(elect, "parish", "votes", Acadia:Winn)
# separate into positon and district
elect <- separate(elect, col = election, into = c("position", "district"), sep = " -- ")
# filter out ballot initiatives
elect <- filter(elect, !(elect$candidate=="YES" | elect$candidate=="NO"))
View(elect)
# separate out party column
elect <- separate(elect, col = candidate, into = c("candidate", "del", "party", "del2"), sep = " ( | )")
# separate out party column
elect <- separate(elect, col = candidate, into = c("candidate", "del", "party"), sep = "(")
elect <- read_excel("la_elections_clean.xlsx")
# rename
elect <- rename(elect, "election"="Election", "candidate"="Option")
# gather parishes
elect <- gather(elect, "parish", "votes", Acadia:Winn)
# separate into positon and district
elect <- separate(elect, col = election, into = c("position", "district"), sep = " -- ")
# filter out ballot initiatives
elect <- filter(elect, !(elect$candidate=="YES" | elect$candidate=="NO"))
# separate out party column
elect <- separate(elect, col = candidate, into = c("candidate", "del", "party"), sep = "\(")
# separate out party column
elect <- separate(elect, col = candidate, into = c("candidate", "del", "party"), sep = " \(")
# separate out party column
elect <- separate(elect, col = candidate, into = c("candidate", "del", "party"), sep = " e(")
# separate out party column
elect <- separate(elect, col = candidate, into = c("candidate", "del", "party"), sep = " \e(")
# separate out party column
elect <- separate(elect, col = candidate, into = c("candidate", "del", "party"), sep = " \ " )
elect <- read_excel("la_elections_clean.xlsx")
# rename
elect <- rename(elect, "election"="Election", "candidate"="Option")
# gather parishes
elect <- gather(elect, "parish", "votes", Acadia:Winn)
# separate into positon and district
elect <- separate(elect, col = election, into = c("position", "district"), sep = " -- ")
# filter out ballot initiatives
elect <- filter(elect, !(elect$candidate=="YES" | elect$candidate=="NO"))
# separate out party column
elect <- separate(elect, col = candidate, into = c("candidate", "del", "party"), sep = "/\(([^)]+)\)/" )
# separate out party column
elect <- separate(elect, col = candidate, into = c("candidate", "del", "party"), sep = "\( | \)/" )
elect <- read_excel("la_elections_clean.xlsx")
# rename
elect <- rename(elect, "election"="Election", "candidate"="Option")
# gather parishes
elect <- gather(elect, "parish", "votes", Acadia:Winn)
# separate into positon and district
elect <- separate(elect, col = election, into = c("position", "district"), sep = " -- ")
# filter out ballot initiatives
elect <- filter(elect, !(elect$candidate=="YES" | elect$candidate=="NO"))
# separate out party column
elect <- separate(elect, col = candidate, into = c("candidate", "del", "party"), sep = "[\\(\\)]" )
elect <- read_excel("la_elections_clean.xlsx")
# rename
elect <- rename(elect, "election"="Election", "candidate"="Option")
# gather parishes
elect <- gather(elect, "parish", "votes", Acadia:Winn)
# separate into positon and district
elect <- separate(elect, col = election, into = c("position", "district"), sep = " -- ")
# filter out ballot initiatives
elect <- filter(elect, !(elect$candidate=="YES" | elect$candidate=="NO"))
# separate out party column
elect <- separate(elect, col = candidate, into = c("candidate", "party"), sep = "[\\(\\)]" )
filter(elect, is.na(elect$votes))
arb <- filter(elect, is.na(elect$votes))
View(arb)
elect <- filter(elect, !is.na(elect$votes))
View(elect)
elect <- elect %>%
group_by(position, district) %>%
summarise(total=sum(votes))
View(elect)
votes <- elect %>%
group_by(position, district) %>%
summarise(total=sum(votes))
elect <- read_excel("la_elections_clean.xlsx")
# rename
elect <- rename(elect, "election"="Election", "candidate"="Option")
# gather parishes
elect <- gather(elect, "parish", "votes", Acadia:Winn)
# separate into positon and district
elect <- separate(elect, col = election, into = c("position", "district"), sep = " -- ")
# filter out ballot initiatives
elect <- filter(elect, !(elect$candidate=="YES" | elect$candidate=="NO"))
# separate out party column
elect <- separate(elect, col = candidate, into = c("candidate", "party"), sep = "[\\(\\)]" )
elect <- filter(elect, !is.na(elect$votes))
votes <- elect %>%
group_by(position, district) %>%
summarise(total=sum(votes))
View(votes)
elect <- left_join(elect, votes, by = c("position", "district"))
View(elect)
elect <- arrange(elect, position)
elect <- arrange(elect, position, district)
elect <- mutate(elect,
pct = votes/total)
elect <- read_excel("la_elections_clean.xlsx")
# rename
elect <- rename(elect, "election"="Election", "candidate"="Option")
# gather parishes
elect <- gather(elect, "parish", "votes", Acadia:Winn)
# separate into positon and district
elect <- separate(elect, col = election, into = c("position", "district"), sep = " -- ")
# filter out ballot initiatives
elect <- filter(elect, !(elect$candidate=="YES" | elect$candidate=="NO"))
# separate out party column
elect <- separate(elect, col = candidate, into = c("candidate", "party"), sep = "[\\(\\)]" )
elect <- filter(elect, !is.na(elect$votes))
votes <- elect %>%
group_by(position, district) %>%
summarise(total=sum(votes))
elect <- left_join(elect, votes, by = c("position", "district"))
elect <- arrange(elect, position, district)
elect <- mutate(elect,
pct = 100*votes/total)
