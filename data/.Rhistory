## Electrification Project
## C. McClintock ## Summer 2018
## Cleaning Script
# ..................................................................................................
# set up: wd, retrieve data
rm(list=ls())
getwd()
# if need be
# setwd("~/../../")
# setwd("Users/charmed33/R/ElectrificationProject")
# set up: libraries
library(dplyr)
library(forcats)
library(tidyverse)
library(readxl)
library(tidyr)
# ..................................................................................................
electric <- read_csv("electrification.csv")
electric <- select(electric, -c(`Series Code`, `Country Code`, `2017 [YR2017]`))
electric <- electric[1:217,]
names(electric) <- c("series", "country", "1990", "1995", "2000", "2005", "2010", "2015")
electric <- gather(electric, `1990`:`2015`, key = "year", value = "access")
electric <- select(electric, -series)
# ..................................................................................................
gdp <- read_csv("gdp.csv")
gdp <- select(gdp, -c(`Series Code`, `Country Code`))
gdp <- gdp[1:217,]
names(gdp) <- c("series", "country", "1990", "1995", "2000", "2005", "2010", "2015")
gdp <- gather(gdp, `1990`:`2015`, key = "year", value = "gdp")
gdp <- select(gdp, -series)
# ..................................................................................................
ed <- read_csv("education.csv")
ed <- select(ed, -c(`Series Code`, `Country Code`))
names(ed) <- c("country", "series", "1990", "1995", "2000", "2005", "2010", "2015")
ed <- filter(ed, ed$series=="Gross enrolment ratio, primary, female (%)")
ed <- select(ed, -series)
ed <- gather(ed, `1990`:`2015`, key = "year", value = "ed")
# ..................................................................................................
df <- left_join(electric, gdp, by = c("country", "year"))
df <- left_join(df, education, by = c("country", "year"))
save.image("electric.Rdata")
## Electrification Project
## C. McClintock ## Summer 2018
## Cleaning Script
# ..................................................................................................
# set up: wd, retrieve data
rm(list=ls())
getwd()
# if need be
# setwd("~/../../")
# setwd("Users/charmed33/R/ElectrificationProject")
# set up: libraries
library(dplyr)
library(forcats)
library(tidyverse)
library(readxl)
library(tidyr)
# ..................................................................................................
electric <- read_csv("electrification.csv")
electric <- select(electric, -c(`Series Code`, `Country Code`, `2017 [YR2017]`))
electric <- electric[1:217,]
names(electric) <- c("series", "country", "1990", "1995", "2000", "2005", "2010", "2015")
electric <- gather(electric, `1990`:`2015`, key = "year", value = "access")
electric <- select(electric, -series)
# ..................................................................................................
gdp <- read_csv("gdp.csv")
gdp <- select(gdp, -c(`Series Code`, `Country Code`))
gdp <- gdp[1:217,]
names(gdp) <- c("series", "country", "1990", "1995", "2000", "2005", "2010", "2015")
gdp <- gather(gdp, `1990`:`2015`, key = "year", value = "gdp")
gdp <- select(gdp, -series)
# ..................................................................................................
ed <- read_csv("education.csv")
ed <- select(ed, -c(`Series Code`, `Country Code`))
names(ed) <- c("country", "series", "1990", "1995", "2000", "2005", "2010", "2015")
ed <- filter(ed, ed$series=="Gross enrolment ratio, primary, female (%)")
ed <- select(ed, -series)
ed <- gather(ed, `1990`:`2015`, key = "year", value = "ed")
# ..................................................................................................
df <- left_join(electric, gdp, by = c("country", "year"))
df <- left_join(df, education, by = c("country", "year"))
save.image("electric.Rdata")
getwd()
## C. McClintock
## Shift Research Lab
## Summer 2018 ## Updated: June 21, 2018
## HOME Tool App: UI & Server
# ..................................................................................................
# set up: wd, retrieve data
rm(list=ls())
getwd()
# if need be
# setwd("~/../../")
# setwd("Users/charmed33/R/")
# setwd("ShiftResearchLab2018/app/HOMEtool")
library(knitr)
library(tidyverse)
library(shiny)
library(plotly)
library(DT)
library(shinythemes)
library(markdown)
library(rsconnect)
load("wages.Rdata")
load("ed.Rdata")
load("commute.Rdata")
avgcommute <- select(avgcmt, nhname, avgcommute) # load in the commute data
avgcommute <- rename(avgcommute, "nbhd"="nhname") # rename for merge
schools <- select(ed, nhname, schoolquality) # load in the clean school data
schools <- rename(schools, "nbhd"="nhname") # rename for merge
data <- left_join(schools, avgcommute, by="nbhd") # join schools and commute time
nbhd <- select(data, nbhd)
parcels <- read_csv("parcels.csv") %>% select(homevalue, nbhd, county) %>% filter(!nbhd=="Kennedy")
nbhd <- select(parcels, nbhd, county) %>% group_by(nbhd, county)
parcels.nbhd <- parcels %>%
group_by(nbhd) %>%
count()
parcels.nbhd <- rename(parcels.nbhd, "ntotal"="n")
parcels.county <- parcels %>%
group_by(county, nbhd) %>%
count() %>% select(-n)
bls.spec <- arrange(bls.spec, industry, occ_title)
ui <- shinyUI(fluidPage(theme = "bootstrap.css",
tags$p(" "),
sidebarPanel(
tags$img(height = 130, src = "tool.png"),
br(),
tags$p("This tool allows users to explore housing affordability, school quality,
and  average commute time in the Denver metro area by industry and occupation.
For more information, or to see the code that produced this application, click",
tags$a(href = "https://github.com/charlottemcclintock/ShiftResearchLab2018", "here.")),
tags$p("To begin, select an industry and occupation:"),
htmlOutput("industry_selector"),
htmlOutput("occupation_selector"),
tags$a(href = "https://www.shiftresearchlab.org", tags$img(height = 90, src = "logo.png"))
),
mainPanel(tags$h3("Housing Affordability and Access to Quality Education by Occupation"),
plotlyOutput("plot")
) # close main panel
) # close fluid page
) # close shinyUI
server <- shinyServer(function(input, output) {
output$industry_selector <- renderUI({
selectInput(
inputId = "industry",
label = "Industry:",
choices = as.character(unique(bls.spec$industry)), # add an empty string c(" ", data) for no default
selected = bls.spec[1,28],
multiple = F)
})
output$occupation_selector <- renderUI({
available <- bls.spec[bls.spec$industry == input$industry, "occ_title"]
selectInput(
inputId = "occupation",
label = "Occupation:",
choices = c("Industry Median Wage", unique(available)),
selected = "Industry Median Wage",
multiple = F)
})
x <- reactive({input$occupation})
occ <- reactive({
if (x()=="Industry Median Wage") {
bls.gen %>%
select(industry, a_median) %>%
filter(bls.gen$industry==input$industry)
} else {
bls.spec %>%
select(occ_title, a_median) %>%
filter(bls.spec$occ_title==input$occupation)
}
})
df <- reactive({
df <- parcels %>%
filter(homevalue < 3*as.data.frame(occ())[1,2]) %>%
group_by(nbhd) %>%
count() %>%
ungroup() %>%
rename("nless"="n") %>% left_join(parcels.nbhd, by = "nbhd") %>%
mutate(affordable = 100*nless/ntotal) %>% right_join(nbhd, by="nbhd") %>%
left_join(parcels.county, by = "nbhd")
df$affordable <- ifelse(is.na(df$affordable), 0, df$affordable)
df <- right_join(df, data, by = "nbhd")
})
output$plot <- renderPlotly({
plot_ly(data = as.data.frame(df()),
x = ~schoolquality,
y = ~affordable,
type = 'scatter',
symbol = ~county,
#            size = ~avgcommute,
color = ~avgcommute,
colors = 'Blues',
mode = 'markers',
marker = list(
size = 20
),
hoverinfo = 'text',
text = ~paste(nbhd, '<br>', county,'<br>', round(affordable, 1),
'percent of homes are affordable',
'<br>', round(schoolquality,1),
'percent grade level proficiency',
'<br>', round(avgcommute,0),
"minute average commute time"), width = 850) %>%
layout(autosize = F,
xaxis = list(title = 'School Quality',   zeroline = FALSE),
yaxis = list(title = 'Percent Affordable Housing'))  %>%
colorbar(title = "Average Commute Time")
})
})
# symbols for counties
# decide on two in plot dimensions, commute time and?
# print selected wage
# check school quality measure
# self sufficiency standard metric
# slider
# use 3 years metric
##
shinyApp(ui = ui, server = server)
parcels <- read_csv("parcels.csv") %>% select(homevalue, nbhd, county) %>% filter(!nbhd=="Kennedy")
shiny::runApp('ShiftResearchLab2018/app/HOMEtool')
## C. McClintock
## Shift Research Lab
## Summer 2018 ## Updated: June 21, 2018
## HOME Tool App: UI & Server
# ..................................................................................................
# set up: wd, retrieve data
rm(list=ls())
getwd()
# if need be
# setwd("~/../../")
# setwd("Users/charmed33/R/")
# setwd("ShiftResearchLab2018/app/HOMEtool")
library(knitr)
library(tidyverse)
library(shiny)
library(plotly)
library(DT)
library(shinythemes)
library(markdown)
library(rsconnect)
load("wages.Rdata")
load("ed.Rdata")
load("commute.Rdata")
avgcommute <- select(avgcmt, nhname, avgcommute) # load in the commute data
avgcommute <- rename(avgcommute, "nbhd"="nhname") # rename for merge
schools <- select(ed, nhname, schoolquality) # load in the clean school data
schools <- rename(schools, "nbhd"="nhname") # rename for merge
data <- left_join(schools, avgcommute, by="nbhd") # join schools and commute time
nbhd <- select(data, nbhd)
parcels <- read_csv("parcels.csv") %>% select(homevalue, nbhd, county) %>% filter(!nbhd=="Kennedy")
parcels.nbhd <- parcels %>%
group_by(nbhd) %>%
count()
parcels.nbhd <- rename(parcels.nbhd, "ntotal"="n")
nh <- select(parcels, nbhd, county)
nh <- unique(nh)
nh2 <- nh %>% group_by(nbhd) %>% count()
nh <- filter(nh, !duplicated(nh$nbhd))
parcels.county <- parcels %>%
group_by(county, nbhd) %>%
count() %>% select(-n)
parcels.county <- nh
bls.spec <- arrange(bls.spec, industry, occ_title)
ui <- shinyUI(fluidPage(theme = "bootstrap.css",
tags$p(" "),
sidebarPanel(
tags$img(height = 130, src = "tool.png"),
br(),
htmlOutput("indicator"),
tags$p("To begin, select an industry and occupation:"),
htmlOutput("industry_selector"),
htmlOutput("occupation_selector"),
tags$a(href = "https://www.shiftresearchlab.org", tags$img(height = 90, src = "logo.png"))
),
mainPanel(tabsetPanel(type = "tabs",
tabPanel("Plot",
tags$h3("Housing Affordability and Access to Quality Education by Occupation"),
plotlyOutput("plot")),
tabPanel("Table",
tableOutput("table")),
tabPanel("Statistics",
tags$br(),
br(),
tags$head(tags$style(" #container * { display: inline; }")),
div(id="container", tags$h3(textOutput("income")), tags$p(" median annual income for "),
tags$strong(textOutput("occ_name")), tags$p("in"), tags$strong(textOutput("ind_name")), "."),
br(),
div(id="container", tags$h3(textOutput("percent")), tags$p("of all houses are affordable for this income."))
),
tabPanel("About",
tags$h3("About This Project"),
tags$p("This tool allows users to explore housing affordability, school quality,
and  average commute time in the Denver metro area by industry and occupation.
For more information, or to see the code that produced this application, click",
tags$a(href = "https://github.com/charlottemcclintock/ShiftResearchLab2018", "here.")),
tags$strong("School Quality"),
tags$p("School quality is determined by CMAS proficiency in reading and math for the three closest
elementary, middle, and high schools. CMAS data was aggregated by school level
(elementary, middle, high) for each neighborhood, then by neighborhood as a whole to create
an average proficiency score for each school."),
tags$strong("Average Commute Time"),
tags$p("Average commute time is based on 5 year American Community Survey tract level data for
average reported commute time. Tracts were then matched to neighborhoods with a matching table.
Neighborhood averages were computed as the average of all matched tracts."),
tags$strong("Housing Affordability"),
tags$p("Parcel data was retrieved from the Adams, Arapahoe, Broomfield, Boulder, Denver, Douglas,
and Jefferson County assessor's offices. Where unit data was available, the total parcel value
was divided by number of units and each unit was counted separately. Where unit data was not
available, the data was restricted to single family homes. The housing affordability measure
displays the percent of homes in each neighborhood for which the parcel value."))
)
) # close main panel
) # close fluid page
) # close shinyUI
server <- shinyServer(function(input, output) {
output$indicator <- renderUI({
selectInput(
inputId = "indicator",
label = "Primary Indicator:",
choices = c("School Quality", "Commute Time"),
selected = "School Quality",
multiple = F)
})
output$industry_selector <- renderUI({
selectInput(
inputId = "industry",
label = "Industry:",
choices = as.character(unique(bls.spec$industry)), # add an empty string c(" ", data) for no default
selected = bls.spec[1,28],
multiple = F)
})
output$occupation_selector <- renderUI({
available <- bls.spec[bls.spec$industry == input$industry, "occ_title"]
selectInput(
inputId = "occupation",
label = "Occupation:",
choices = c("Industry Median Wage", unique(available)),
selected = "Industry Median Wage",
multiple = F)
})
x <- reactive({input$occupation})
occ <- reactive({
if (x()=="Industry Median Wage") {
bls.gen %>%
select(industry, a_median) %>%
filter(bls.gen$industry==input$industry)
} else {
bls.spec %>%
select(occ_title, a_median) %>%
filter(bls.spec$occ_title==input$occupation)
}
})
df <- reactive({
df <- parcels %>%
filter(homevalue < 3*as.data.frame(occ())[1,2]) %>%
group_by(nbhd) %>%
count() %>%
ungroup() %>%
rename("nless"="n") %>% left_join(parcels.nbhd, by = "nbhd") %>%
mutate(affordable = 100*nless/ntotal) %>% right_join(nbhd, by="nbhd") %>%
left_join(parcels.county, by = "nbhd")
df$affordable <- ifelse(is.na(df$affordable), 0, df$affordable)
df <- right_join(df, data, by = "nbhd")
})
output$table <- renderTable({
as.data.frame(df()) %>% select(nbhd, county, schoolquality, affordable, avgcommute)
})
output$percent <- renderText({
paste(sum(df()$nless)/sum(df()$ntotal), "%")
})
output$income <- renderText({
paste("$", prettyNum(as.data.frame(occ())[1,2], big.mark=",", preserve.width = "none"))
})
output$ind_name <- renderText({
input$industry
})
output$occ_name<- renderText({
input$occupation
})
output$plot <- renderPlotly({
if (input$indicator=="School Quality") {
plot_ly(data = as.data.frame(df()),
x = ~schoolquality,
y = ~affordable,
type = 'scatter',
symbol = ~county,
symbols = c(1:8),
#            size = ~avgcommute,
color = ~avgcommute,
colors = 'Blues',
mode = 'markers',
marker = list(
size = 20
),
hoverinfo = 'text',
text = ~paste(nbhd, '<br>', county,'<br>', round(affordable, 1),
'percent of homes are affordable',
'<br>', round(schoolquality,1),
'percent grade level proficiency',
'<br>', round(avgcommute,0),
"minute average commute time"), width = 850) %>%
layout(autosize = F,
xaxis = list(title = 'School Quality',   zeroline = FALSE),
yaxis = list(title = 'Percent Affordable Housing'))  %>%
colorbar(title = "Average Commute Time")
} else {
plot_ly(data = as.data.frame(df()),
x = ~avgcommute,
y = ~affordable,
type = 'scatter',
symbol = ~county,
#            size = ~avgcommute,
color = ~schoolquality,
colors = 'Blues',
mode = 'markers',
marker = list(
size = 20
),
hoverinfo = 'text',
text = ~paste(nbhd, '<br>', county,'<br>', round(affordable, 1),
'percent of homes are affordable',
'<br>', round(schoolquality,1),
'percent grade level proficiency',
'<br>', round(avgcommute,0),
"minute average commute time"), width = 850) %>%
layout(autosize = F,
xaxis = list(title = 'Average Commute Time (Minutes)',   zeroline = FALSE),
yaxis = list(title = 'Percent Affordable Housing'))  %>%
colorbar(title = "Average Commute Time")
}
})
})
# symbols for counties
# decide on two in plot dimensions, commute time and?
# print selected wage
# check school quality measure
# self sufficiency standard metric
# slider
# use 3 years metric
# what to do about counties that match to multiple nbhds?
# add indicator selector to select for commute time
##
shinyApp(ui = ui, server = server)
load("wages.Rdata")
load("ed.Rdata")
load("commute.Rdata")
shiny::runApp('ShiftResearchLab2018/app/HOMEtool')
install.packages("Rlinkedin")
shiny::runApp('ShiftResearchLab2018/app/HOMEtool')
shiny::runApp('ShiftResearchLab2018/app/HOMEtool')
# deploy to shinyapps.io
#
deployApp()
install.packages("rvest")
library(rvest)
knitr::opts_chunk$set(echo = TRUE)
#
setwd("LouisianaGov/data")
getwd()
# if need be
setwd("LouisianaGov/data")
shiny::runApp('~/R/MiscProjects/PalestineProject')
load("viz.Rdata")
View(la.b1b)
la.b1b
runApp('~/R/LouisianaGov')
