tags$p("School quality is determined by CMAS proficiency in reading and math for the three closest
elementary, middle, and high schools. CMAS data was aggregated by school level
(elementary, middle, high) for each neighborhood, then by neighborhood as a whole to create
an average proficiency score for each school."),
tags$strong("Average Commute Time"),
tags$p("Average commute time is based on 5 year American Community Survey tract level data for
average reported commute time. Tracts were then matched to neighborhoods with a matching table.
Neighborhood averages were computed as the average of all matched tracts."),
tags$strong("Housing Affordability"),
tags$p("Parcel data was retrieved from the Adams, Arapahoe, Broomfield, Boulder, Denver, Douglas,
and Jefferson County assessor's offices. Where unit data was available, the total parcel value
was divided by number of units and each unit was counted separately. Where unit data was not
available, the data was restricted to single family homes. The housing affordability measure
displays the percent of homes in each neighborhood for which the parcel value."))
)
) # close main panel
) # close fluid page
) # close shinyUI
server <- shinyServer(function(input, output) {
output$indicator <- renderUI({
selectInput(
inputId = "indicator",
label = "Primary Indicator:",
choices = c("School Quality", "Commute Time"),
selected = "School Quality",
multiple = F)
})
output$industry_selector <- renderUI({
selectInput(
inputId = "industry",
label = "Industry:",
choices = as.character(unique(bls.spec$industry)), # add an empty string c(" ", data) for no default
selected = bls.spec[1,28],
multiple = F)
})
output$occupation_selector <- renderUI({
available <- bls.spec[bls.spec$industry == input$industry, "occ_title"]
selectInput(
inputId = "occupation",
label = "Occupation:",
choices = c("Industry Median Wage", unique(available)),
selected = "Industry Median Wage",
multiple = F)
})
x <- reactive({input$occupation})
occ <- reactive({
if (x()=="Industry Median Wage") {
bls.gen %>%
select(industry, a_median) %>%
filter(bls.gen$industry==input$industry)
} else {
bls.spec %>%
select(occ_title, a_median) %>%
filter(bls.spec$occ_title==input$occupation)
}
})
df <- reactive({
df <- parcels %>%
filter(homevalue < 3*as.data.frame(occ())[1,2]) %>%
group_by(nbhd) %>%
count() %>%
ungroup() %>%
rename("nless"="n") %>% left_join(parcels.nbhd, by = "nbhd") %>%
mutate(affordable = 100*nless/ntotal) %>% right_join(nbhd, by="nbhd") %>%
left_join(parcels.county, by = "nbhd")
df$affordable <- ifelse(is.na(df$affordable), 0, df$affordable)
df <- right_join(df, data, by = "nbhd")
})
output$table <- renderTable({
as.data.frame(df()) %>% select(nbhd, county, schoolquality, affordable, avgcommute)
})
output$percent <- renderText({
paste(sum(df()$nless)/sum(df()$ntotal), "%")
})
output$income <- renderText({
paste("$", prettyNum(as.data.frame(occ())[1,2], big.mark=",", preserve.width = "none"))
})
output$ind_name <- renderText({
input$industry
})
output$occ_name<- renderText({
input$occupation
})
output$plot <- renderPlotly({
if (input$indicator=="School Quality") {
plot_ly(data = as.data.frame(df()),
x = ~schoolquality,
y = ~affordable,
type = 'scatter',
symbol = ~county,
symbols = c(1:8),
#            size = ~avgcommute,
color = ~avgcommute,
colors = 'Blues',
mode = 'markers',
marker = list(
size = 20
),
hoverinfo = 'text',
text = ~paste(nbhd, '<br>', county,'<br>', round(affordable, 1),
'percent of homes are affordable',
'<br>', round(schoolquality,1),
'percent grade level proficiency',
'<br>', round(avgcommute,0),
"minute average commute time"), width = 850) %>%
layout(autosize = F,
xaxis = list(title = 'School Quality',   zeroline = FALSE),
yaxis = list(title = 'Percent Affordable Housing'))  %>%
colorbar(title = "Average Commute Time")
} else {
plot_ly(data = as.data.frame(df()),
x = ~avgcommute,
y = ~affordable,
type = 'scatter',
symbol = ~county,
#            size = ~avgcommute,
color = ~schoolquality,
colors = 'Blues',
mode = 'markers',
marker = list(
size = 20
),
hoverinfo = 'text',
text = ~paste(nbhd, '<br>', county,'<br>', round(affordable, 1),
'percent of homes are affordable',
'<br>', round(schoolquality,1),
'percent grade level proficiency',
'<br>', round(avgcommute,0),
"minute average commute time"), width = 850) %>%
layout(autosize = F,
xaxis = list(title = 'Average Commute Time (Minutes)',   zeroline = FALSE),
yaxis = list(title = 'Percent Affordable Housing'))  %>%
colorbar(title = "Average Commute Time")
}
})
})
# symbols for counties
# decide on two in plot dimensions, commute time and?
# print selected wage
# check school quality measure
# self sufficiency standard metric
# slider
# use 3 years metric
# what to do about counties that match to multiple nbhds?
# add indicator selector to select for commute time
##
shinyApp(ui = ui, server = server)
load("wages.Rdata")
load("ed.Rdata")
load("commute.Rdata")
shiny::runApp('ShiftResearchLab2018/app/HOMEtool')
install.packages("Rlinkedin")
shiny::runApp('ShiftResearchLab2018/app/HOMEtool')
shiny::runApp('ShiftResearchLab2018/app/HOMEtool')
# deploy to shinyapps.io
#
deployApp()
install.packages("rvest")
library(rvest)
getwd()
# if need be
setwd("Louisiana/data")
## C. McClintock
## Data for Democracy - RunForOffice
## Summer 2018
## Cleaning Script
# ..................................................................................................
# set up: wd, retrieve data
rm(list=ls())
getwd()
# if need be
setwd("Louisiana/data")
# set up: libraries
library(dplyr)
library(forcats)
library(tidyverse)
library(readxl)
library(tidyr)
library(scales)
library(RColorBrewer)
# ..................................................................................................
# 1. LOUISIANA DEMOGRAPHICS
# 2. ALL ELECTED OFFICES
# 3. LAW ENFORCEMENT
# 4. LOCAL GOVERNMENT
# ..................................................................................................
# 1. LOUISIANA DEMOGRAPHICS
pop <- read_csv("acs16.csv")
pop$race <- as.factor(pop$race)
pop <- mutate(pop,
race=fct_recode(race,
Other="American Indian",
Other="Asian",
Other = "Hawaiian Pacific Islander",
Other = "Two or More Races"))
pop <- aggregate(pop$percent, by=list(race=pop$race), FUN="sum")
pop <- rename(pop, "percent"="x")
pop$level <- "2016 Louisiana Population"
pop$type <- "2016 Louisiana Population"
pop$genoffice <- "2016 Louisiana Population"
pop <- select(pop, race, level, type, genoffice, percent)
pop$percent <- pop$percent*100
pop <- pop[rep(1:nrow(pop), pop$percent),] %>% select(race, level, type, genoffice)
# ..................................................................................................
# 2. ALL ELECTED OFFICES
# read in the data
louisiana <- read_excel("elected_officials.xlsx", sheet = 1)
la <- louisiana
# make the names easier to use
names(la) <- str_to_lower(names(la))
la <- rename(la, "office"="office title", "description"="office description",
"zip"="zip code", "candidate"="candidate name", "party"="party code")
la <- select(la, office, description, city, zip, state,
parish, candidate, ethnicity, sex, party)
# coerce to factor class
la <- mutate(la,
office = as.factor(office),
city = as.factor(city),
parish = as.factor(parish),
ethnicity = as.factor(ethnicity),
sex = as.factor(sex),
party = as.factor(party))
levels(la$office)
# add some potentially interesting useful categories
# level of government
la <- mutate(la,
level=fct_recode(office,
Federal = "U. S. Senator",
Federal = "U. S. Representative",
State = "Governor",
State = "Lieutenant Governor",
State = "Secretary of State",
State = "Attorney General",
State = "Commissioner",
State = "State Treasurer",
State = "Associate Justice",
State = "Judge, Court of Appeal",
State = "Public Service Commission",
State = "Member, BESE",
State = "State Senator",
State = "State Representative",
Local = "District Judge",
Local = "Judge",
Local = "Magistrate",
Local = "District Attorney",
Local = "Judge, Family Court",
Local = "Sheriff",
Local = "Clerk of Court",
Local = "Clerk",
Local = "Assessor",
Local = "Coroner" ,
Local = "Parish President" ,
Local = "Mayor" ,
Local = "Mayor-President" ,
Local = "Councilman at Large" ,
Local = "Councilmember at Large" ,
Local = "Police Juror" ,
Local = "Council Member",
Local = "Parish Commission Member",
Local = "Councilman",
Local = "Member",
Local = "Councilmember",
Local = "Member of Parish Council",
Local = "Council Member at Large",
Local = "City Judge",
Local = "City Judge, City Court",
Local = "City Marshal",
Local = "City Constable",
Local = "Constable",
Local = "Member of School Board",
Local = "Mbr. of School Bd.",
Local = "Justice of the Peace",
Local = "Justice of the Peace(s)",
Local = "Constable(s)",
Local = "Chief of Police",
Local = "Marshal",
Local = "City Prosecutor",
Local = "Alderman at Large",
Local = "Councilmen at Large",
Local = "Council Member(s) at Large",
Local = "Alderman",
Local = "Aldermen",
Local = "Selectman",
Local = "Council Member(s)",
Local = "Member, Board of Trustees",
Local = "Council Members",
Local = "Councilmen",
Local = "Council Member I",
Local = "Council Member II",
Local = "Council Member III" ))
# type of office
la <- mutate(la,
type=fct_recode(office,
Legislative = "U. S. Senator",
Legislative = "U. S. Representative",
Executive = "Governor",
Executive = "Lieutenant Governor",
Executive = "Secretary of State",
Executive = "Attorney General",
Executive = "Commissioner",
Executive = "State Treasurer",
Judicial = "Associate Justice",
Judicial = "Judge, Court of Appeal",
Executive = "Public Service Commission",
Education = "Member, BESE",
Legislative = "State Senator",
Legislative = "State Representative",
Judicial = "District Judge",
Judicial = "Judge",
Judicial = "Magistrate",
Judicial = "District Attorney",
Judicial = "Judge, Family Court",
"Law Enforcement" = "Sheriff",
Judicial = "Clerk of Court",
Judicial = "Clerk",
"Local Government" = "Assessor",
"Law Enforcement" = "Coroner" ,
Executive = "Parish President" ,
Executive = "Mayor" ,
Executive = "Mayor-President" ,
"Local Government" = "Councilman at Large" ,
"Local Government" = "Councilmember at Large" ,
"Local Government" = "Police Juror" ,
"Local Government" = "Council Member",
"Local Government" = "Parish Commission Member",
"Local Government" = "Councilman",
"Local Government" = "Member",
"Local Government" = "Councilmember",
"Local Government" = "Member of Parish Council",
"Local Government" = "Council Member at Large",
Judicial = "City Judge",
Judicial = "City Judge, City Court",
"Law Enforcement" = "City Marshal",
"Law Enforcement" = "City Constable",
"Law Enforcement" = "Constable",
Education = "Member of School Board",
Education = "Mbr. of School Bd.",
Judicial = "Justice of the Peace",
Judicial = "Justice of the Peace(s)",
"Law Enforcement" = "Constable(s)",
"Law Enforcement" = "Chief of Police",
"Law Enforcement" = "Marshal",
Judicial = "City Prosecutor",
"Local Government" = "Alderman at Large",
"Local Government" = "Councilmen at Large",
"Local Government" = "Council Member(s) at Large",
"Local Government" = "Alderman",
"Local Government" = "Aldermen",
"Local Government" = "Selectman",
"Local Government" = "Council Member(s)",
"Local Government" = "Member, Board of Trustees",
"Local Government" = "Council Members",
"Local Government" = "Councilmen",
"Local Government" = "Council Member I",
"Local Government" = "Council Member II",
"Local Government" = "Council Member III"))
# level of government
la <- mutate(la,
genoffice = office,
genoffice=fct_recode(genoffice,
"Judge" = "Judge, Family Court",
"Clerk" = "Clerk of Court",
"Mayor" = "Mayor-President" ,
"Council Member" = "Councilman at Large" ,
"Council Member" = "Councilmember at Large" ,
"Council Member" = "Council Member",
"Council Member" = "Councilman",
"Council Member" = "Councilmember",
"Council Member" = "Member of Parish Council",
"Council Member" = "Council Member at Large",
"City Judge" = "City Judge, City Court",
"Member of School Board" = "Mbr. of School Bd.",
"Justice of the Peace" = "Justice of the Peace(s)",
"Constable" = "Constable(s)",
"Alderman" = "Alderman at Large",
"Council Member" = "Councilmen at Large",
"Council Member" = "Council Member(s) at Large",
"Alderman" = "Aldermen",
"Council Member" = "Council Member(s)",
"Council Member" = "Council Members",
"Council Member" = "Councilmen",
"Council Member" = "Council Member I",
"Council Member" = "Council Member II",
"Council Member" = "Council Member III" ))
# create more readable factor categories
# race # all other racial groups are very small, makes sense to combine
la <- mutate(la,
race=fct_recode(ethnicity,
White="W",
"Black or African American"="B",
Other="A",
Other="O",
Other = "I",
Other = "H"))
la <- mutate(la,
race=fct_relevel(race,
"White",
"Black or African American",
"Other"))
la <- mutate(la,
gender=fct_recode(sex,
Male="M",
Female="F"))
la <- mutate(la,
party=fct_recode(party,
Democrat="D",
Republican="R",
Other="N",
Other="G",
Other="I",
Other="L",
Other="O"))
la <- mutate(la,
party=fct_relevel(party,
"Democrat",
"Other",
"Republican"))
la <- mutate(la,
type = fct_relevel(type,
"Education",
"Law Enforcement",
"Local Government",
"Executive",
"Legislative",
"Judicial"))
la <- select(la, -c(ethnicity, sex))
# ..................................................................................................
# 3. LAW ENFORCEMENT
judges <- c("Judge, Court of Appeal", "Judge", "Judge, Family Court", "District Judge",
"City Judge", "City Judge, City Court")
judges <- filter(la, office %in% judges)
sheriffs <- "Sheriff"
sheriffs <- filter(la, office %in% sheriffs)
police <- "Chief of Police"
police <- filter(la, office %in% police)
DA <- "District Attorney"
DA <- filter(la, office %in% DA)
enforce <- c("Judge, Court of Appeal", "Judge", "Judge, Family Court", "District Judge",
"City Judge", "City Judge, City Court", "Sheriff", "Chief of Police",
"District Attorney", "Marshal", "City Marshal", "City Constable", "Constable")
enforce <- filter(la, office %in% enforce)
# coerce to factor again to drop ghost levels
enforce <- mutate(enforce,
genoffice = enforce$office,
genoffice = fct_recode(office,
"Judge" = "Judge, Court of Appeal",
"Judge" = "Judge, Family Court",
"Judge" = "District Judge",
"Judge" =  "City Judge",
"Judge" = "City Judge, City Court",
"Constable" = "City Constable",
"Marshal" = "City Marshal"))
enforce$genoffice = factor(enforce$genoffice)
enforce <- mutate(enforce,
race = fct_relevel(race,
"Black or African American",
"Other",
"White"))
enforce <- mutate(enforce,
party = fct_relevel(party,
"Democrat",
"Other",
"Republican"))
df2 <- full_join(enforce, pop, by = c("race", "genoffice"))
df2 <- mutate(df2,
genoffice = as.factor(genoffice),
genoffice = fct_relevel(genoffice,
"2016 Louisiana Population",
"Chief of Police",
"Constable",
"Judge",
"Marshal",
"District Attorney",
"Sheriff"))
# ..................................................................................................
# 4. LOCAL GOVERNMENT
local <- c("Mayor", "Mayor-President", "Council Member", "Parish President", "Police Juror")
local <- filter(la, genoffice %in% local)
local <- mutate(local,
genoffice = fct_relevel(genoffice,
"Mayor",
"Council Member",
"Parish President",
"Police Juror"))
local$genoffice = factor(local$genoffice)
df3 <- full_join(local, pop, by = c("race", "genoffice"))
df3 <- mutate(df3,
genoffice = as.factor(genoffice),
genoffice = fct_relevel(genoffice,
"2016 Louisiana Population",
"Mayor",
"Council Member",
"Parish President",
"Police Juror"))
mpop <- read.csv("municipal_populations.csv")
mpop <- separate(data = mpop, col = city, into = c("city", "type"),
sep = " city| town| village") %>% select(city, X2017)
mpop <- rename(mpop, "population"="X2017")
mpop <- mutate(mpop,
city = fct_recode(city,
"Amite" = "Amite City",
"Lafitte" = "Jean Lafitte"))
local$city[local$description == 'City of New Orleans'] <- 'New Orleans'
local$city[local$description == 'Metro Council, City of Baton Rouge'] <- 'Baton Rouge'
local <- left_join(local, mpop, by = "city")
# ..................................................................................................
muni <- c("Mayor", "Council Member")
muni <- filter(local, genoffice %in% muni)
muni$density <- ifelse(muni$population>47000, "Urban", "Rural")
muni$density <- factor(muni$density)
# ..................................................................................................
save.image("LA.Rdata")
